
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\007\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\004\000\002\005\005\000" +
    "\002\006\010\000\002\015\002\000\002\015\004\000\002" +
    "\015\006\000\002\016\005\000\002\007\006\000\002\007" +
    "\007\000\002\007\011\000\002\007\007\000\002\007\004" +
    "\000\002\007\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\003\000\002\010\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\012\005\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\006\003\006\004\007\001\002\000\004\002" +
    "\111\001\002\000\004\002\000\001\002\000\004\002\uffff" +
    "\001\002\000\004\005\010\001\002\000\004\034\011\001" +
    "\002\000\012\012\021\013\016\014\020\015\017\001\002" +
    "\000\014\012\021\013\016\014\020\015\017\035\107\001" +
    "\002\000\004\005\022\001\002\000\014\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\035\ufffc\001\002\000\014\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\035\ufffd\001\002\000\004\005\uffde" +
    "\001\002\000\004\005\uffdd\001\002\000\004\005\uffdf\001" +
    "\002\000\004\005\uffe0\001\002\000\006\031\023\032\024" +
    "\001\002\000\014\012\ufff9\013\ufff9\014\ufff9\015\ufff9\035" +
    "\ufff9\001\002\000\016\012\021\013\016\014\020\015\017" +
    "\033\ufff7\036\ufff7\001\002\000\004\005\105\001\002\000" +
    "\006\033\030\036\027\001\002\000\012\012\021\013\016" +
    "\014\020\015\017\001\002\000\004\034\031\001\002\000" +
    "\022\003\037\006\035\010\034\011\040\012\021\013\016" +
    "\014\020\015\017\001\002\000\014\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\035\ufff8\001\002\000\004\005\045\001\002" +
    "\000\004\032\074\001\002\000\004\032\066\001\002\000" +
    "\004\035\065\001\002\000\006\007\uffee\035\uffee\001\002" +
    "\000\016\003\046\005\045\032\051\037\041\040\050\041" +
    "\052\001\002\000\020\007\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\033\uffe5\035\uffe5\001\002\000\020\007\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\033\uffe2\035\uffe2\001\002" +
    "\000\012\007\uffef\016\055\017\056\035\uffef\001\002\000" +
    "\020\007\uffeb\016\uffeb\017\uffeb\020\061\021\060\033\uffeb" +
    "\035\uffeb\001\002\000\022\007\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\033\uffe1\035\uffe1\001\002\000\014" +
    "\007\uffea\016\uffea\017\uffea\033\uffea\035\uffea\001\002\000" +
    "\020\007\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\033\uffe7" +
    "\035\uffe7\001\002\000\020\007\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\033\uffe4\035\uffe4\001\002\000\016\003\046" +
    "\005\045\032\051\037\041\040\050\041\052\001\002\000" +
    "\020\007\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\033\uffe3" +
    "\035\uffe3\001\002\000\010\016\055\017\056\033\054\001" +
    "\002\000\020\007\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\033\uffe6\035\uffe6\001\002\000\014\005\045\032\051\037" +
    "\041\040\050\041\052\001\002\000\014\005\045\032\051" +
    "\037\041\040\050\041\052\001\002\000\020\007\uffec\016" +
    "\uffec\017\uffec\020\061\021\060\033\uffec\035\uffec\001\002" +
    "\000\014\005\045\032\051\037\041\040\050\041\052\001" +
    "\002\000\014\005\045\032\051\037\041\040\050\041\052" +
    "\001\002\000\020\007\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\033\uffe9\035\uffe9\001\002\000\020\007\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\033\uffe8\035\uffe8\001\002\000" +
    "\020\007\uffed\016\uffed\017\uffed\020\061\021\060\033\uffed" +
    "\035\uffed\001\002\000\014\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\035\ufff4\001\002\000\016\003\046\005\045\032\051" +
    "\037\041\040\050\041\052\001\002\000\010\016\055\017" +
    "\056\033\070\001\002\000\022\003\037\006\035\010\034" +
    "\011\040\012\021\013\016\014\020\015\017\001\002\000" +
    "\006\007\072\035\ufff2\001\002\000\022\003\037\006\035" +
    "\010\034\011\040\012\021\013\016\014\020\015\017\001" +
    "\002\000\006\007\ufff1\035\ufff1\001\002\000\016\003\046" +
    "\005\045\032\051\037\041\040\050\041\052\001\002\000" +
    "\010\016\055\017\056\033\076\001\002\000\022\003\037" +
    "\006\035\010\034\011\040\012\021\013\016\014\020\015" +
    "\017\001\002\000\006\007\ufff0\035\ufff0\001\002\000\004" +
    "\022\101\001\002\000\016\003\046\005\045\032\051\037" +
    "\041\040\050\041\052\001\002\000\012\007\ufff3\016\055" +
    "\017\056\035\ufff3\001\002\000\004\005\104\001\002\000" +
    "\006\033\ufff5\036\ufff5\001\002\000\006\033\ufff6\036\ufff6" +
    "\001\002\000\014\012\ufffa\013\ufffa\014\ufffa\015\ufffa\035" +
    "\ufffa\001\002\000\004\002\ufffe\001\002\000\014\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\035\ufffb\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\011\005\014\006\013\014" +
    "\012\001\001\000\010\005\107\006\105\014\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\024\015\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\102\001\001\000\004\016\031\001\001\000" +
    "\006\007\035\014\032\001\001\000\002\001\001\000\004" +
    "\013\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\042\011\043" +
    "\012\046\013\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\052\011\043\012\046\013\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\063\012\046\013\041\001\001\000\010\011\056\012\046" +
    "\013\041\001\001\000\002\001\001\000\006\012\062\013" +
    "\041\001\001\000\006\012\061\013\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\066\011\043\012\046\013\041\001\001" +
    "\000\002\001\001\000\006\007\070\014\032\001\001\000" +
    "\002\001\001\000\006\007\072\014\032\001\001\000\002" +
    "\001\001\000\012\010\074\011\043\012\046\013\041\001" +
    "\001\000\002\001\001\000\006\007\076\014\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\101\011" +
    "\043\012\046\013\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ClassDeclaration 
            {
              Object RESULT =null;
		 System.out.println("Program -> ClassDeclaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= error 
            {
              Object RESULT =null;
		 System.err.println("Syntax error in Program"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclaration ::= CLASS ID LBRACE BodyDeclarations RBRACE 
            {
              Object RESULT =null;
		 System.out.println("ClassDeclaration -> CLASS ID LBRACE BodyDeclarations RBRACE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BodyDeclarations ::= FieldDeclaration 
            {
              Object RESULT =null;
		 System.out.println("BodyDeclarations -> FieldDeclaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BodyDeclarations ::= MethodDeclaration 
            {
              Object RESULT =null;
		 System.out.println("BodyDeclarations -> MethodDeclaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BodyDeclarations ::= BodyDeclarations FieldDeclaration 
            {
              Object RESULT =null;
		 System.out.println("BodyDeclarations -> BodyDeclarations FieldDeclaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BodyDeclarations ::= BodyDeclarations MethodDeclaration 
            {
              Object RESULT =null;
		 System.out.println("BodyDeclarations -> BodyDeclarations MethodDeclaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyDeclarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FieldDeclaration ::= Type ID SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("FieldDeclaration -> Type ID SEMICOLON"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclaration ::= Type ID LPAREN FormalParameters RPAREN Block 
            {
              Object RESULT =null;
		 System.out.println("MethodDeclaration -> Type ID LPAREN FormalParameters RPAREN Block"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FormalParameters ::= 
            {
              Object RESULT =null;
		 System.out.println("FormalParameters -> empty"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FormalParameters ::= Type ID 
            {
              Object RESULT =null;
		 System.out.println("FormalParameters -> Type ID"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FormalParameters ::= FormalParameters COMMA Type ID 
            {
              Object RESULT =null;
		 System.out.println("FormalParameters -> FormalParameters COMMA Type ID"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameters",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Block ::= LBRACE Statement RBRACE 
            {
              Object RESULT =null;
		 System.out.println("Block -> LBRACE Statement RBRACE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= Type Identifier ASSIGN Expression 
            {
              Object RESULT =null;
		 System.out.println("Statement -> Type Identifier ASSIGN Expression"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= IF LPAREN Expression RPAREN Statement 
            {
              Object RESULT =null;
		 System.out.println("Statement -> IF LPAREN Expression RPAREN Statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              Object RESULT =null;
		 System.out.println("Statement -> IF LPAREN Expression RPAREN Statement ELSE Statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              Object RESULT =null;
		 System.out.println("Statement -> WHILE LPAREN Expression RPAREN Statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= RETURN Expression 
            {
              Object RESULT =null;
		 System.out.println("Statement -> RETURN Expression"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= error 
            {
              Object RESULT =null;
		 System.err.println("Syntax error in Statement"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression PLUS Term 
            {
              Object RESULT =null;
		 System.out.println("Expression -> Expression PLUS Term"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= Expression MINUS Term 
            {
              Object RESULT =null;
		 System.out.println("Expression -> Expression MINUS Term"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expression ::= Term 
            {
              Object RESULT =null;
		 System.out.println("Expression -> Term"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= error 
            {
              Object RESULT =null;
		 System.err.println("Syntax error in Expression"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Term ::= Term MULTIPLY Factor 
            {
              Object RESULT =null;
		 System.out.println("Term -> Term MULTIPLY Factor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Term ::= Term DIVIDE Factor 
            {
              Object RESULT =null;
		 System.out.println("Term -> Term DIVIDE Factor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Term ::= Factor 
            {
              Object RESULT =null;
		 System.out.println("Term -> Factor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Factor ::= LPAREN Expression RPAREN 
            {
              Object RESULT =null;
		 System.out.println("Factor -> LPAREN Expression RPAREN"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Factor ::= INTLIT 
            {
              Object RESULT =null;
		 System.out.println("Factor -> INTLIT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Factor ::= FLOATLIT 
            {
              Object RESULT =null;
		 System.out.println("Factor -> FLOATLIT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Factor ::= STRINGLIT 
            {
              Object RESULT =null;
		 System.out.println("Factor -> STRINGLIT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Factor ::= Identifier 
            {
              Object RESULT =null;
		 System.out.println("Factor -> Identifier"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Identifier ::= ID 
            {
              Object RESULT =null;
		 System.out.println("Identifier -> ID"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= INT 
            {
              Object RESULT =null;
		 System.out.println("Type -> INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("Type -> FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println("Type -> BOOLEAN"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Type ::= VOID 
            {
              Object RESULT =null;
		 System.out.println("Type -> VOID"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
