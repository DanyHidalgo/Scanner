// Paquete
package parser;

// Importaciones necesarias
import java_cup.runtime.*;

// Declaraciones de símbolos (terminales)
terminal CLASS, ID, IF, ELSE, WHILE, RETURN, INT, BOOLEAN, FLOAT, VOID;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, ASSIGN, LESS_THAN, GREATER_THAN, LESS_THAN_EQUALS, GREATER_THAN_EQUALS, EQUALS_EQUALS, NOT_EQUALS, SEMICOLON;
terminal LPAREN, RPAREN, LBRACE, RBRACE, COMMA, INTLIT, FLOATLIT, STRINGLIT, TRUE, FALSE, ERROR, NUMBER, TIMES, NOT, AND, OR, BREAK, CONTINUE, CALLOUT;

// Declaraciones de no terminales
non terminal Program, FieldDecl, MethodDecl, Block, VarDecl, Type, FieldDecls, CalloutArgs, FieldDeclList;
non terminal Statement, Expr, Location, AssignOp, MethodCall, CalloutArg, MethodDecls;
non terminal BinOp, ArithOp, RelOp, EqOp, CondOp, Literal, Identifier, VarDecls;
non terminal FormalParameters, FormalParameter, MethodName, Alpha, Digit, AlphaNum, Statements;


// Precedencia
precedence right ELSE;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE;
precedence right NOT;
precedence left AND, OR;
precedence left LESS_THAN, GREATER_THAN, LESS_THAN_EQUALS, GREATER_THAN_EQUALS;
precedence left EQUALS_EQUALS, NOT_EQUALS;



// Regla inicial
start with Program;

// Reglas de producción
Program ::= CLASS ID LBRACE FieldDecls MethodDecls RBRACE
           {: System.out.println("Program -> class Program { FieldDecls MethodDecls }"); :}
           ;

FieldDecls ::= /* vacío */
             | FieldDecls FieldDecl
             ;

FieldDeclList ::= FieldDecl
                | FieldDeclList FieldDecl
                ;

FieldDecl ::= Type ID SEMICOLON
            {: System.out.println("FieldDecl -> Type ID ;"); :}
            | Type ID LBRACE INTLIT RBRACE SEMICOLON
            {: System.out.println("FieldDecl -> Type ID [INTLIT] ;"); :}
            ;

FormalParameters ::= /* vacío */
                   | FormalParameter
                   | FormalParameters COMMA FormalParameter
                   ;

FormalParameter ::= Type ID
                  ;


MethodDecls ::= MethodDecl
              | MethodDecls MethodDecl
              ;

MethodDecl ::= Type ID LPAREN FormalParameters RPAREN Block
             {: System.out.println("MethodDecl -> Type ID (FormalParameters) Block"); :}
             | VOID ID LPAREN FormalParameters RPAREN Block
             {: System.out.println("MethodDecl -> void ID (FormalParameters) Block"); :}
             ;

Block ::= LBRACE VarDecls Statements RBRACE
        {: System.out.println("Block -> { VarDecls Statements }"); :}
        ;

VarDecls ::= /* empty */
           | VarDecl VarDecls
           ;

VarDecl ::= Type ID SEMICOLON
          {: System.out.println("VarDecl -> Type ID ;"); :}
          ;

Type ::= INT
       | BOOLEAN
       ;

Statements ::= Statement
             | Statements Statement
             ;

Statement ::= Location AssignOp Expr SEMICOLON
            {: System.out.println("Asignación exitosa: "); :}
            | MethodCall SEMICOLON
            | IF LPAREN Expr RPAREN Block
            | IF LPAREN Expr RPAREN Block ELSE Block
            | WHILE LPAREN Expr RPAREN Block
            | RETURN Expr SEMICOLON
            | BREAK SEMICOLON
            | CONTINUE SEMICOLON
            | Block
            ;

Location ::= ID
           | ID LBRACE Expr RBRACE
           ;

AssignOp ::= ASSIGN
           | TIMES
           | PLUS
           | MINUS
           ;

MethodCall ::= MethodName LPAREN CalloutArgs RPAREN
             | CALLOUT LPAREN STRINGLIT CalloutArgs RPAREN
             ;

MethodName ::= ID;

CalloutArgs ::= /* empty */
              | CalloutArg
              | CalloutArgs COMMA CalloutArg
              ;

CalloutArg ::= Expr;

Expr ::= Location
       | MethodCall
       | Literal
       | Expr PLUS Expr
       | Expr MINUS Expr
       | Expr MULTIPLY Expr
       | Expr DIVIDE Expr
       | Expr LESS_THAN Expr
       | Expr GREATER_THAN Expr
       | Expr LESS_THAN_EQUALS Expr
       | Expr GREATER_THAN_EQUALS Expr
       | Expr EQUALS_EQUALS Expr
       | Location EQUALS_EQUALS Literal
       | Expr NOT_EQUALS Expr
       | Expr AND Expr
       | Expr OR Expr
       | MINUS Expr %prec MINUS
       | NOT Expr %prec NOT
       | LPAREN Expr RPAREN
       ;

Literal ::= NUMBER
          | TRUE
          | FALSE
          | STRINGLIT
          ;