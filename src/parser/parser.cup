// Paquete
package parser;

// Importaciones necesarias
import java_cup.runtime.*;

// Declaraciones de símbolos (terminales)
terminal CLASS, ID, IF, ELSE, WHILE, RETURN, INT, BOOLEAN, FLOAT, VOID;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, ASSIGN, LESS_THAN, GREATER_THAN, LESS_THAN_EQUALS, GREATER_THAN_EQUALS, EQUALS_EQUALS, NOT_EQUALS, SEMICOLON;
terminal LPAREN, RPAREN, LBRACE, RBRACE, COMMA, INTLIT, FLOATLIT, STRINGLIT, TRUE, FALSE, ERROR,TIMES,NUMBER,NOT, AND,OR;

// Declaraciones de no terminales
non terminal Program, ClassDeclaration, BodyDeclarations, FieldDeclaration, MethodDeclaration;
non terminal Statement, Expression, Term, Factor, Identifier, Type, FormalParameters, Block;

// Precedencia
precedence right ELSE;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE;

// Regla inicial
start with Program;

// Reglas de producción
Program ::= ClassDeclaration
           {: System.out.println("Program -> ClassDeclaration"); :}
           | error
           {: System.err.println("Syntax error in Program"); :}
           ;

ClassDeclaration ::= CLASS ID LBRACE BodyDeclarations RBRACE
                   {: System.out.println("ClassDeclaration -> CLASS ID LBRACE BodyDeclarations RBRACE"); :}
                   ;

BodyDeclarations ::= FieldDeclaration
                   {: System.out.println("BodyDeclarations -> FieldDeclaration"); :}
                   | MethodDeclaration
                   {: System.out.println("BodyDeclarations -> MethodDeclaration"); :}
                   | BodyDeclarations FieldDeclaration
                   {: System.out.println("BodyDeclarations -> BodyDeclarations FieldDeclaration"); :}
                   | BodyDeclarations MethodDeclaration
                   {: System.out.println("BodyDeclarations -> BodyDeclarations MethodDeclaration"); :}
                   ;

FieldDeclaration ::= Type ID SEMICOLON
                   {: System.out.println("FieldDeclaration -> Type ID SEMICOLON"); :}
                   ;

MethodDeclaration ::= Type ID LPAREN FormalParameters RPAREN Block
                   {: System.out.println("MethodDeclaration -> Type ID LPAREN FormalParameters RPAREN Block"); :}
                   ;

// Declaración de declaraciones de parámetros formales para métodos
FormalParameters ::= /* empty */
                   {: System.out.println("FormalParameters -> empty"); :}
                   | Type ID
                   {: System.out.println("FormalParameters -> Type ID"); :}
                   | FormalParameters COMMA Type ID
                   {: System.out.println("FormalParameters -> FormalParameters COMMA Type ID"); :}
                   ;

// Bloques
Block ::= LBRACE Statement RBRACE
         {: System.out.println("Block -> LBRACE Statement RBRACE"); :}
         ;

// Declaraciones de Statements
Statement ::= Type Identifier ASSIGN Expression
            {: System.out.println("Statement -> Type Identifier ASSIGN Expression"); :}
            | IF LPAREN Expression RPAREN Statement
            {: System.out.println("Statement -> IF LPAREN Expression RPAREN Statement"); :} %prec ELSE
            | IF LPAREN Expression RPAREN Statement ELSE Statement
            {: System.out.println("Statement -> IF LPAREN Expression RPAREN Statement ELSE Statement"); :}
            | WHILE LPAREN Expression RPAREN Statement
            {: System.out.println("Statement -> WHILE LPAREN Expression RPAREN Statement"); :}
            | RETURN Expression
            {: System.out.println("Statement -> RETURN Expression"); :}
            | error
            {: System.err.println("Syntax error in Statement"); :}
            ;

// Reglas de producción para las Expresiones
Expression ::= Expression PLUS Term
             {: System.out.println("Expression -> Expression PLUS Term"); :}
             | Expression MINUS Term
             {: System.out.println("Expression -> Expression MINUS Term"); :}
             | Term
             {: System.out.println("Expression -> Term"); :}
             | error
             {: System.err.println("Syntax error in Expression"); :}
             ;

Term ::= Term MULTIPLY Factor
       {: System.out.println("Term -> Term MULTIPLY Factor"); :}
       | Term DIVIDE Factor
       {: System.out.println("Term -> Term DIVIDE Factor"); :}
       | Factor
       {: System.out.println("Term -> Factor"); :}
       ;

// Factores (valores individuales o sub-expresiones)
Factor ::= LPAREN Expression RPAREN
         {: System.out.println("Factor -> LPAREN Expression RPAREN"); :}
         | INTLIT
         {: System.out.println("Factor -> INTLIT"); :}
         | FLOATLIT
         {: System.out.println("Factor -> FLOATLIT"); :}
         | STRINGLIT
         {: System.out.println("Factor -> STRINGLIT"); :}
         | Identifier
         {: System.out.println("Factor -> Identifier"); :}
         ;


Identifier ::= ID
             {: System.out.println("Identifier -> ID"); :}
             ;

// Tipos de datos
Type ::= INT
       {: System.out.println("Type -> INT"); :}
       | FLOAT
       {: System.out.println("Type -> FLOAT"); :}
       | BOOLEAN
       {: System.out.println("Type -> BOOLEAN"); :}
       | VOID
       {: System.out.println("Type -> VOID"); :}
       ;
